//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by  the adamant-cc-lex tool.
//     Version: <%= GeneratorVersion %>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;

namespace <%= ClassNamespace %>
{
	[GeneratedCode("adamant-cc-lex", "<%= GeneratorVersion %>")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	public partial class <%= ClassName %> : Adamant.CompilerCompiler.Lex.Runtime.Lexer<<%= ClassName %>.TokenType>
	{
		public enum TokenType
		{
			<%= TokenTypes %>
		}

		public enum Mode
		{
			<%= Modes %>
		}

<%= PlaneOffsets %>
		private static readonly <%= EquivalenceClassType %>[] equivalenceTable = {<%= EquivalenceTable %>};

		private static readonly <%= RowMapType %>[] rowMap = {<%= RowMap %>};
		private static readonly <%= StateType %>[] transitions = {<%= Transitions %>};

		private readonly TextReader reader;
		private Mode currentMode = Mode.<%= InitialMode %>;
		private Stack<Mode> modeStack = new Stack<Mode>();

		public <%= ClassName %>(TextReader reader)
		{
			this.reader = reader;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static int EquivalenceClass(int codePoint)
		{
			var plane = codePoint & 0x1F000;

			switch(plane)
			{
<%= EquivalenceClassCases %>
			}
		}

		public void PushMode(Mode mode)
		{
			modeStack.Push(currentMode);
			currentMode = mode;
		}

		public void PopMode()
		{
			currentMode = modeStack.Pop();
		}

		public void SetMode(Mode mode)
		{
			currentMode = mode;
		}
	}
}