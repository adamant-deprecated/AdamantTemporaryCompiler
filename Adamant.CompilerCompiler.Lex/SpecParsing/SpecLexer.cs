//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by  the adamant-cc-lex tool.
//     Version: 0.1.0-alpha-*
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Adamant.CompilerCompiler.Lex.SpecParsing
{
	[GeneratedCode("adamant-cc-lex", "0.1.0-alpha-*")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	public partial class SpecLexer : Adamant.CompilerCompiler.Lex.Runtime.Lexer<SpecLexer.Channel, SpecLexer.TokenType>
	{
		public enum Channel
		{
			Default
		}

		public enum TokenType
		{
			Alternation, AnyChar, BeginCharClass, BeginCommands, BeginGroup,
			BeginningOfLine, BeginQuantifier, Capture, Category, Channels,
			Char, CharRange, Comma, Comment, Complement, Decode, Definition,
			EndCharClass, EndGroup, EndOfLine, EndQuantifier, Identifier,
			Intersection, InvalidKeyword, Lexer, Literal, Mode, Modes, More,
			Number, Optional, PopMode, PushMode, Repetition, Skip,
			Substitute, Subtraction, Terminator, UnexpectedCodePoint, Upto,
			WhiteSpace
		}

		public enum Mode
		{
			Default = 38, CharacterClass = 37
		}

		private static readonly ushort[] plane0Offsets =
		{
			0, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 350, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134
		};
		private static readonly byte[] equivalenceTable =
		{
			61, 61, 61, 61, 61, 61, 61, 61, 61, 11, 4, 7, 8, 3, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10,
			40, 53, 61, 46, 61, 41, 57, 44, 45, 2, 61, 51, 42, 38, 1, 52, 33,
			33, 33, 33, 33, 33, 33, 33, 33, 34, 50, 61, 61, 49, 39, 12, 58,
			58, 58, 58, 58, 58, 32, 32, 32, 32, 32, 32, 28, 32, 32, 32, 32,
			60, 32, 32, 59, 32, 32, 32, 32, 32, 36, 54, 0, 37, 61, 61, 23,
			18, 21, 19, 20, 55, 32, 27, 15, 32, 14, 29, 26, 31, 22, 16, 32,
			25, 13, 24, 17, 56, 32, 30, 32, 32, 47, 35, 48, 43, 61, 61, 61,
			61, 61, 61, 9, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 5, 6, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
			61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61
		};

		private static readonly ushort[] rowMap =
		{
			0, 62, 124, 186, 248, 310, 372, 434, 496, 558, 620, 682, 744,
			806, 868, 930, 992, 1054, 1116, 1178, 1240, 1302, 1364, 1426,
			1488, 1550, 1612, 1674, 1736, 1798, 1860, 1922, 1984, 2046, 2108,
			2170, 2232, 2294, 2356, 2418, 2480, 2542, 2604, 2666, 2728, 2790,
			2852, 2914, 2976, 3038, 3100, 3162, 3224, 3286, 3348, 3410, 3472,
			3534, 3596, 3658, 3720, 3782, 3844, 3906, 3968, 4030, 4092, 4154,
			4216, 4278, 4340, 4402, 4464, 4526, 4588, 4650, 4712, 4774, 4836,
			4898, 4960, 5022
		};
		private static readonly byte[] transitions =
		{
			81, 0, 81, 81, 81, 81, 81, 0, 81, 0, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 0, 0, 81, 81, 0, 81, 81, 0, 0, 81, 81, 81, 0, 81, 81, 0,
			81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 0, 81, 81, 81, 81, 81, 81,
			0, 0, 81, 81, 81, 81, 81, 81, 81, 0, 3, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 3, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 3, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 0, 81, 0, 81, 81, 81, 81, 81, 0, 81, 81,
			81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81,
			81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 6, 6, 6, 6,
			81, 6, 81, 81, 81, 81, 81, 81, 81, 81, 81, 6, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 6, 81, 81, 6,
			81, 81, 6, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 26, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 31, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 25, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 81, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 81, 81, 5, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 61, 6, 6, 6, 6, 6, 81, 81, 81, 81, 6, 81, 6, 6, 6, 6, 6, 6,
			6, 6, 6, 81, 7, 8, 81, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
			20, 81, 21, 22, 23, 24, 24, 81, 6, 81, 81, 6, 6, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 4, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 28, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 27, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 36, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 45, 81, 81, 81, 81, 81, 46, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			39, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 29, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81,
			81, 81, 81, 30, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 32, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 33,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 34, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 35, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 40, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 51, 81, 81, 41, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 50, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 42, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 47, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 43, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 53, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 44, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 0, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 48, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 49, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 52, 81, 81,
			80, 81, 81, 77, 81, 75, 81, 81, 81, 81, 56, 81, 81, 69, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 54, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 55, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 57, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 0, 81, 81, 58, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 59, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 60, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 62, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 63, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 0, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 64, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 65, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 66, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 67, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			68, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 70, 81, 81, 81, 76, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 71, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 72, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 73, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 74, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 79, 81, 81, 81, 81, 78,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
			81, 81, 81, 81, 81
		};
		private static readonly byte[] actionMap =
		{
			1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
			19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
			35, 36, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 0
		};

		private const int ErrorState = 81;

		private readonly TextReader reader;
		private Mode currentMode = Mode.Default;
		private Stack<Mode> modeStack = new Stack<Mode>();
		private readonly StringBuilder buffer = new StringBuilder();
		private int currentLine = 0;
		private int currentColumn = 0;
		private int currentCodepoint = 0;

		public SpecLexer(TextReader reader)
		{
			this.reader = reader;
		}

		public SpecLexer(Stream stream)
			: this(new StreamReader(stream))
		{
		}

		public Mode CurrentMode
		{
			get { return currentMode; }
		}


		public void PushMode(Mode mode)
		{
			modeStack.Push(currentMode);
			currentMode = mode;
		}

		public void PopMode()
		{
			currentMode = modeStack.Pop();
		}

		public void SetMode(Mode mode)
		{
			currentMode = mode;
		}

		public override IEnumerator<Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>> GetEnumerator()
		{
			while(true)
				yield return NextToken();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType> NextToken()
		{
			var currentState = (int)currentMode;
			var afterCarriageReturn = false;
			while(true)
			{
				var maybeCodePoint = ReadCodePoint();
				if(maybeCodePoint == null)
					throw new NotImplementedException("EOF");

				var codePoint = maybeCodePoint.Value;

				afterCarriageReturn = TrackLineAndColumn(codePoint, afterCarriageReturn);
				var equivalenceClass = EquivalenceClass(codePoint);
				var nextState = transitions[rowMap[currentState] + equivalenceClass];
				var action = actionMap[nextState];
				TokenType? outputTokenType = null;
				switch(action)
				{
					case 0:
						break;
					case 1:
						outputTokenType = TokenType.Literal;
						break;
					case 2:
						break;
					case 3:
						outputTokenType = TokenType.Char;
						break;
					case 4:
						outputTokenType = TokenType.Channels;
						break;
					case 5:
						outputTokenType = TokenType.Repetition;
						break;
					case 6:
						outputTokenType = TokenType.Identifier;
						break;
					case 7:
						outputTokenType = TokenType.Definition;
						break;
					case 8:
						outputTokenType = TokenType.Alternation;
						break;
					case 9:
						outputTokenType = TokenType.BeginningOfLine;
						break;
					case 10:
						outputTokenType = TokenType.AnyChar;
						break;
					case 11:
						outputTokenType = TokenType.Optional;
						break;
					case 12:
						outputTokenType = TokenType.Complement;
						break;
					case 13:
						outputTokenType = TokenType.Intersection;
						break;
					case 14:
						outputTokenType = TokenType.Subtraction;
						break;
					case 15:
						outputTokenType = TokenType.Upto;
						break;
					case 16:
						outputTokenType = TokenType.BeginGroup;
						break;
					case 17:
						outputTokenType = TokenType.EndGroup;
						break;
					case 18:
						outputTokenType = TokenType.EndOfLine;
						break;
					case 19:
						outputTokenType = TokenType.BeginQuantifier;
						break;
					case 20:
						outputTokenType = TokenType.EndQuantifier;
						break;
					case 21:
						outputTokenType = TokenType.Terminator;
						break;
					case 22:
						outputTokenType = TokenType.Comma;
						break;
					case 23:
						outputTokenType = TokenType.Number;
						break;
					case 24:
						outputTokenType = TokenType.UnexpectedCodePoint;
						break;
					case 25:
						currentMode = modeStack.Pop();
						outputTokenType = TokenType.EndCharClass;
						break;
					case 26:
						outputTokenType = TokenType.BeginCommands;
						break;
					case 27:
						outputTokenType = TokenType.Substitute;
						break;
					case 28:
						outputTokenType = TokenType.Skip;
						break;
					case 29:
						outputTokenType = TokenType.Mode;
						break;
					case 30:
						outputTokenType = TokenType.More;
						break;
					case 31:
						outputTokenType = TokenType.Modes;
						break;
					case 32:
						outputTokenType = TokenType.Lexer;
						break;
					case 33:
						outputTokenType = TokenType.Decode;
						break;
					case 34:
						outputTokenType = TokenType.PopMode;
						break;
					case 35:
						outputTokenType = TokenType.Capture;
						break;
					case 36:
						outputTokenType = TokenType.PushMode;
						break;
					default:
						throw new InvalidOperationException();
				}

				// TODO generate (or not) the token
				if(outputTokenType != null)
					return new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, outputTokenType.Value, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), null);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private int? ReadCodePoint()
		{
			var codePoint = reader.Read();
			if(codePoint == -1) return null;

			var charValue = (char)codePoint;
			if(char.IsHighSurrogate(charValue))
			{
				var low = reader.Read();
				if(low == -1) return null;
				codePoint = char.ConvertToUtf32(charValue, (char)low);
			}
			return codePoint;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static int EquivalenceClass(int codePoint)
		{
			var plane = codePoint & 0x1F000;

			switch(plane)
			{
				case 0x0:
					return equivalenceTable[plane0Offsets[(codePoint & 0xFF00) >> 8] + (codePoint & 0xFF)];
				default:
					return 61;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool TrackLineAndColumn(int codePoint, bool afterCarriageReturn)
		{
			switch(codePoint)
			{
				// TODO clarify these
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					currentLine++;
					currentColumn = 0;
					afterCarriageReturn = false;
					break;
				case '\r':
					currentLine++;
					currentColumn = 0;
					afterCarriageReturn = true;
					break;
				case '\n':
					if(afterCarriageReturn)
						afterCarriageReturn = false;
					else
					{
						currentLine++;
						currentColumn = 0;
					}
					break;
				default:
					afterCarriageReturn = false;
					currentColumn++;
					break;
			}
			return afterCarriageReturn;
		}
	}
}