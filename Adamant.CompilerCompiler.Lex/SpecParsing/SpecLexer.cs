//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by  the adamant-cc-lex tool.
//     Version: 0.1.0-alpha-*
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

namespace Adamant.CompilerCompiler.Lex.SpecParsing
{
	[GeneratedCode("adamant-cc-lex", "0.1.0-alpha-*")]
	[DebuggerNonUserCode]
	[CompilerGenerated]
	public partial class SpecLexer : Adamant.CompilerCompiler.Lex.Runtime.Lexer<SpecLexer.Channel, SpecLexer.TokenType>
	{
		public enum Channel
		{
			Default
		}

		public enum TokenType
		{
			Action, Alternation, AnyChar, BeginCharClass, BeginCommands,
			BeginGroup, BeginningOfLine, BeginQuantifier, Capture, Category,
			Channel, Channels, Char, CharRange, Comma, Comment, Complement,
			Decode, Definition, EndCharClass, EndGroup, EndOfLine,
			EndQuantifier, Error, EscapeDash, EscapeRightBracket, Identifier,
			Intersection, InvalidKeyword, Lexer, Literal, Mode, Modes, More,
			Namespace, NegateCharClass, Number, Optional, PopMode, PushMode,
			Repetition, Skip, Subtraction, Terminator, Text, Type,
			UnexpectedCodePoint, Upto, WhiteSpace
		}

		public enum Mode
		{
			Default = 2, StartCharacterClass = 1, CharacterClass = 45
		}

		private static readonly ushort[] plane0Offsets =
		{
			0, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 350, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
			134, 134, 134, 134, 134, 134, 134, 134, 134
		};
		private static readonly byte[] equivalenceTable =
		{
			64, 64, 64, 64, 64, 64, 64, 64, 64, 11, 4, 7, 8, 3, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 10,
			42, 55, 64, 49, 33, 43, 60, 46, 47, 2, 64, 53, 44, 40, 1, 54, 36,
			36, 36, 36, 36, 36, 36, 36, 36, 37, 52, 32, 64, 34, 41, 12, 61,
			61, 61, 61, 61, 61, 35, 35, 35, 35, 35, 35, 21, 35, 35, 35, 35,
			63, 35, 35, 62, 35, 35, 35, 35, 35, 39, 56, 0, 48, 64, 64, 28,
			57, 27, 15, 16, 58, 35, 20, 23, 35, 22, 30, 13, 29, 14, 17, 35,
			24, 19, 25, 18, 59, 35, 31, 26, 35, 50, 38, 51, 45, 64, 64, 64,
			64, 64, 64, 9, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 5, 6, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
			64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64
		};

		private static readonly ushort[] rowMap =
		{
			0, 65, 130, 195, 260, 325, 390, 455, 520, 585, 650, 715, 780,
			845, 910, 975, 1040, 1105, 1170, 1235, 1300, 1365, 1430, 1495,
			1560, 1625, 1690, 1755, 1820, 1885, 1950, 2015, 2080, 2145, 2210,
			2275, 2340, 2405, 2470, 2535, 2600, 2665, 2730, 2795, 2860, 2925,
			2990, 3055, 3120, 3185, 3250, 3315, 3380, 3445, 3510, 3575, 3640,
			3705, 3770, 3835, 3900, 3965, 4030, 4095, 4160, 4225, 4290, 4355,
			4420, 4485, 4550, 4615, 4680, 4745, 4810, 4875, 4940, 5005, 5070,
			5135, 5200, 5265, 5330, 5395, 5460, 5525, 5590, 5655, 5720, 5785,
			5850, 5915, 5980, 6045, 6110, 6175, 6240, 6305, 6370, 6435, 6500,
			6565, 6630, 6695, 6760
		};
		private static readonly byte[] transitions =
		{
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 0, 104, 104, 0, 104, 0, 0,
			0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 0, 0,
			104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 0, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 27, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 5, 104,
			104, 104, 104, 104, 104, 104, 104, 6, 73, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 8, 9, 10, 11, 12, 13, 14, 15,
			16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 6, 6, 6, 6, 6, 6, 6, 6, 104,
			104, 104, 104, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 0,
			104, 104, 0, 0, 104, 104, 0, 104, 104, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 0, 104, 0, 104, 104, 7, 7, 7, 7, 7,
			7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 104, 104, 104, 7, 7,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0,
			104, 104, 104, 104, 7, 104, 104, 7, 7, 7, 0, 7, 7, 7, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 30, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 36, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 44, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 28, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 46, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 3, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 3, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 43, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 61, 104, 104, 0, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 60, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 58, 104, 104, 104, 104, 104, 104, 104, 104, 59, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 34, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 56, 104, 104, 104, 104, 104, 104, 104, 104, 104, 48,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			57, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 53, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 41, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 51, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 4, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 31, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 32, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 33, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 35, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 37, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 38, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 39, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104,
			104, 104, 40, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 42, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 47, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 66, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 0, 104, 104, 49, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 68, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104,
			104, 104, 63, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			50, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 72,
			104, 99, 92, 103, 104, 69, 104, 104, 104, 104, 104, 52, 104, 96,
			104, 102, 89, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 54, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 55, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 62,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			64, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			65, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 67,
			104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 0, 104, 104, 104, 104, 0, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 70, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 71, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 74, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			75, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 76, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 77, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 78, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 79, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 80, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			81, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			82, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			83, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 84, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 85, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 86, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 0, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 87, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 98, 104, 104, 104, 104, 104, 104, 104, 88,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 90, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 91,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			93, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 94, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 0, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 95, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 97,
			104, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 100, 104,
			104, 104, 101, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
			104, 104, 104, 104, 104, 104, 104, 104, 104, 104
		};
		private static readonly byte[] actionMap =
		{
			1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
			19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
			35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 3, 0, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 0
		};

		private const int ErrorState = 104;

		private readonly TextReader reader;
		private Mode currentMode = Mode.Default;
		private Stack<Mode> modeStack = new Stack<Mode>();
		private readonly StringBuilder tokenBuffer = new StringBuilder();
		private readonly StringBuilder captureBuffer = new StringBuilder();
		private int currentLine = 0;
		private int currentColumn = 0;

		public SpecLexer(TextReader reader)
		{
			this.reader = reader;
		}

		public SpecLexer(Stream stream)
			: this(new StreamReader(stream))
		{
		}

		public Mode CurrentMode
		{
			get { return currentMode; }
		}


		public void PushMode(Mode mode)
		{
			modeStack.Push(currentMode);
			currentMode = mode;
		}

		public void PopMode()
		{
			currentMode = modeStack.Pop();
		}

		public void SetMode(Mode mode)
		{
			currentMode = mode;
		}

		public override IEnumerator<Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>> GetEnumerator()
		{
			while(true)
				yield return NextToken();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType> NextToken()
		{
			var currentState = (int)currentMode;
			var afterCarriageReturn = false;
			while(true)
			{
				var maybeCodePoint = ReadCodePoint();
				if(maybeCodePoint == null)
					throw new NotImplementedException("EOF");

				var codePoint = maybeCodePoint.Value;

				afterCarriageReturn = TrackLineAndColumn(codePoint, afterCarriageReturn);
				var equivalenceClass = EquivalenceClass(codePoint);
				var nextState = transitions[rowMap[currentState] + equivalenceClass];
				var action = actionMap[nextState];
				Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType> token = null;
				switch(action)
				{
					case 0:
						tokenBuffer.Append(codePoint);
						continue;
					case 1:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Literal, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 2:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Comment, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 3:
						currentMode = Mode.CharacterClass;
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Char, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 4:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Namespace, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 5:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Repetition, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 6:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.WhiteSpace, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 7:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Identifier, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 8:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Definition, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 9:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Alternation, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 10:
						modeStack.Push(currentMode);
						currentMode = Mode.StartCharacterClass;
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.BeginCharClass, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 11:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.AnyChar, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 12:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Optional, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 13:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Complement, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 14:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Intersection, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 15:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Subtraction, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 16:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Upto, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 17:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.BeginGroup, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 18:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.EndGroup, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 19:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.BeginningOfLine, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 20:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.EndOfLine, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 21:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.BeginQuantifier, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 22:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.EndQuantifier, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 23:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Terminator, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 24:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Comma, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 25:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Number, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 26:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.UnexpectedCodePoint, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 27:
						currentMode = Mode.CharacterClass;
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.NegateCharClass, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 28:
						currentMode = modeStack.Pop();
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.EndCharClass, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 29:
						currentMode = Mode.CharacterClass;
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.CharRange, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 30:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.BeginCommands, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 31:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Mode, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 32:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.More, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 33:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Skip, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 34:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Text, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 35:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Type, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 36:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Modes, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 37:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Error, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 38:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Lexer, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 39:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Decode, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 40:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.PopMode, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 41:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Channel, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 42:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Capture, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 43:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.PushMode, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					case 44:
						token = new Adamant.CompilerCompiler.Lex.Runtime.Token<Channel, TokenType>(Channel.Default, TokenType.Channels, false, default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), default(Adamant.CompilerCompiler.Lex.Runtime.FilePosition), captureBuffer.ToString());
						break;
					default:
						throw new InvalidOperationException();
				}
				tokenBuffer.Clear();

				// TODO generate (or not) the token
				if(token != null)
					return token;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private int? ReadCodePoint()
		{
			var codePoint = reader.Read();
			if(codePoint == -1) return null;

			var charValue = (char)codePoint;
			if(char.IsHighSurrogate(charValue))
			{
				var low = reader.Read();
				if(low == -1) return null;
				codePoint = char.ConvertToUtf32(charValue, (char)low);
			}
			return codePoint;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static int EquivalenceClass(int codePoint)
		{
			var plane = codePoint & 0x1F000;

			switch(plane)
			{
				case 0x0:
					return equivalenceTable[plane0Offsets[(codePoint & 0xFF00) >> 8] + (codePoint & 0xFF)];
				default:
					return 64;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private bool TrackLineAndColumn(int codePoint, bool afterCarriageReturn)
		{
			switch(codePoint)
			{
				// TODO clarify these
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					currentLine++;
					currentColumn = 0;
					afterCarriageReturn = false;
					break;
				case '\r':
					currentLine++;
					currentColumn = 0;
					afterCarriageReturn = true;
					break;
				case '\n':
					if(afterCarriageReturn)
						afterCarriageReturn = false;
					else
					{
						currentLine++;
						currentColumn = 0;
					}
					break;
				default:
					afterCarriageReturn = false;
					currentColumn++;
					break;
			}
			return afterCarriageReturn;
		}
	}
}